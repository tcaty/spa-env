package generate

import (
	"fmt"
	"os"
	"strings"

	"github.com/tcaty/spa-env/internal/common/dotenv"
	"github.com/tcaty/spa-env/internal/common/utils"
)

func Generate(workdir, dotenvDev, dotenvProd, keyPrefix, placeholderPrefix string, enableComments bool) (string, error) {
	entries, err := dotenv.Read(workdir, dotenvDev, keyPrefix, placeholderPrefix)
	if err != nil {
		return "", fmt.Errorf("unable to read %s file: %v", dotenvDev, err)
	}

	path := fmt.Sprintf("%s%s", utils.AddSuffix(workdir, "/"), dotenvProd)
	content := generateContent(entries, enableComments)

	if err := os.WriteFile(path, []byte(content), 0644); err != nil {
		return "", fmt.Errorf("error occured while writing file: %v", err)
	}

	return path, nil
}

func generateContent(entries []dotenv.Entry, enableComments bool) string {
	content := make([]string, 0)

	if enableComments {
		content = append(
			content,
			"# This file was auto-generated by spa-env tool. Don't edit it manually!",
			"# There is a full list of environment variables sorted alphabetically below.",
			"# It includes client side variables as well as server side variables.",
			"# Just copy this list and paste it to app service environment in docker-compose.yml file.",
			"#",
		)

		for _, entry := range entries {
			content = append(content, fmt.Sprintf("# %s", entry.EnvVariable()))
		}
	}

	for _, entry := range entries {
		if entry.Skip() {
			continue
		}

		if enableComments {
			content = append(
				content,
				fmt.Sprintf("\n# env -> %s", entry.EnvVariable()),
				fmt.Sprintf("# src -> process.env.%s", entry.Key),
			)
		}

		content = append(content, fmt.Sprintf("%s=%s", entry.Key, entry.Placeholder()))
	}

	return fmt.Sprintf("%s\n", strings.Join(content, "\n"))
}
